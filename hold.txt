<div v-else class="space-y-6">
            <div v-for="(field, index) in formSchema.fields" :key="field.id" class="border rounded-lg p-4">
              <div class="flex justify-between items-start mb-3">
                <div class="flex items-center gap-2">
                  <UIcon :name="fieldTypes.find(t => t.value === field.type)?.icon" class="w-5 h-5" />
                  <span class="font-medium">{{ field.label || 'Unlabeled Field' }}</span>
                  <UBadge v-if="field.required" label="Required" size="xs" color="red" />
                </div>
                <UButton
                  icon="i-heroicons-trash"
                  color="red"
                  variant="ghost"
                  size="xs"
                  @click="removeField(index)"
                />
              </div>

              <!-- Field Configuration -->
              <div class="space-y-4">
                <UFormField label="Field Label">
                  <UInput class="w-full" v-model="field.label" />
                </UFormField>

                <UFormField :label="['checkbox', 'radio', 'select'].includes(field.type) ? 'Help Text' : 'Placeholder Text'">
                  <UInput class="w-full" v-model="field.placeholder" />
                </UFormField>

                <UFormField label="Required">
                  <USwitch v-model="field.required" />
                </UFormField>

                <UFormField v-if="['select', 'radio', 'checkbox'].includes(field.type)" label="Options">
                  <div class="space-y-2">
                    <div v-for="(option, i) in field.options" :key="i" class="flex items-center gap-2">
                      <UInput class="w-full" v-model="field.options[i]" />
                      <UButton
                        icon="i-heroicons-trash"
                        color="red"
                        variant="ghost"
                        size="xs"
                        @click="field.options.splice(i, 1)"
                        :disabled="field.type === 'checkbox' && field.options.length <= 1"
                      />
                    </div>
                    <UButton
                      icon="i-heroicons-plus"
                      label="Add Option"
                      size="xs"
                      variant="outline"
                      @click="field.options.push('')"
                    />
                  </div>
                </UFormField>

                <!-- Multiple selection for checkboxes -->
                <UFormField v-if="field.type === 'checkbox'" label="Multiple Selection">
                  <USwitch v-model="field.multiple" />
                </UFormField>

                <!-- Date format configuration -->
                <UFormField v-if="field.type === 'date'" label="Date Format">
                  <USelect 
                    v-model="field.format"
                    :items="[
                      { value: 'YYYY-MM-DD', label: 'YYYY-MM-DD' },
                      { value: 'MM/DD/YYYY', label: 'MM/DD/YYYY' },
                      { value: 'DD/MM/YYYY', label: 'DD/MM/YYYY' }
                    ]"
                  />
                </UFormField>

                <!-- Updated Validation Rules Section -->
                <UFormField label="Validation Rules">
                  <div class="space-y-2">
                    <div v-for="(value, rule) in field.validation" :key="rule" class="flex items-center gap-2">
                      <UBadge :label="getValidationLabel(rule)" class="flex-shrink-0" />
                      
                      <template v-if="rule !== 'required'">
                        <UInput 
                          v-model.number="field.validation[rule]"
                          :type="['minLength', 'maxLength', 'min', 'max'].includes(rule) ? 'number' : 'text'"
                          :placeholder="getValidationLabel(rule)"
                          class="w-full flex-1"
                        />
                      </template>

                      <UButton
                        icon="i-heroicons-trash"
                        color="red"
                        variant="ghost"
                        size="xs"
                        @click="removeValidation(field, rule)"
                        :disabled="rule === 'min' && field.type === 'number'"
                      />
                    </div>

                    <USelect class="w-full"
                      v-model="newValidation"
                      :items="validationTypes.filter(t => !field.validation?.[t.value])"
                      placeholder="Add validation rule"
                      @update:model-value="(val) => {
                        addValidation(field, val)
                        newValidation = null // Additional safeguard
                      }"
                    />
                  </div>
                </UFormField>
              </div>
            </div>
          </div>